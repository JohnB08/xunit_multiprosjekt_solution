using Core.Classes;
using Core.Interfaces;

namespace Tests;

public class AnimalPenTest
{
    //Vår animalpen er en mer komplisert class, men vi kan sette opp et sett med tester
    //som lar oss teste gradvis funksjonalitet for vår class. 

    /// <summary>
    /// Her vil vi definere en test som lar oss skjekke om vår pen kan initialiseres som vi vil.
    /// </summary>
    [Fact]
    public void TestCreateBearPen()
    {
        //Vi ser fra våre kriterier at siden vår pen skal ta inn et sett med plass skal vi kunne definere en animal pen slik.
        var pen = new AnimalPen<Bear>(1);
        Assert.NotNull(pen); //Her passer vi på at vår pen eksisterer etter initialisering. 
    }

    /// <summary>
    /// Her kan vi teste at en tom pen thrower som vi vil, hvis vi prøver å poppe fra en tom pen.
    /// </summary>
    [Fact]
    public void TestPenThrows()
    {
        var pen = new AnimalPen<Bear>(1);
        Assert.Throws<IndexOutOfRangeException>(pen.Pop); //Siden vi ikke har en bear i pen, skal dette throwe en IndexOutOfRange exception.
    }

    /// <summary>
    /// Her kan vi teste vår push implementasjon.
    /// </summary>
    [Fact]
    public void TestPushAnimal()
    {
        var pen = new AnimalPen<Bear>(1);
        pen.Push(new Bear("Harald", "Brown", 12, Feed.Omnivore));
        Assert.Equal(1, pen.Count); //Her skal vi se at vi nå har ett dyr i vår bearPen.
        Assert.Throws<IndexOutOfRangeException>(()=>pen.Push(new Bear("Einar", "Brown", 10, Feed.Omnivore))); //Siden vår pen bare holder ett dyr, så skal dette throwe en indexoutofrange exception.
    }

    /// <summary>
    /// Her kan vi teste vår Pop implementasjon
    /// </summary>
    [Fact]
    public void TestPopAnimal()
    {
        var pen = new AnimalPen<Bear>(1);
        pen.Push(new Bear("Harald", "Brown", 12, Feed.Omnivore));
        var bear = pen.Pop();
        Assert.NotNull(bear);
        Assert.Equal(0, pen.Count);
    }

    /// <summary>
    /// Her kan vi teste om vår pen inheriter korrekte interfaces for å behandle vår animal pen videre.
    /// </summary>
    [Fact]
    public void TestPenInterfaces()
    {
        //Vi vil jo også ha et sett med måter å interface med vår animal pen på.
        //Det kan vi også implementere tester for. 
        //Vi kan teste at våre interfacer tillater korrekt covariance og contravariance.
        var pen = new AnimalPen<Bear>(1);
        Assert.IsAssignableFrom<IAnimalPen<Bear>>(pen);
        Assert.IsAssignableFrom<IAnimalWriter<Bear>>(pen); //Vi kan skrive til vår pen via den generiske interfacen IAnimalWriter<T>, men bare av typen Bears
        Assert.IsAssignableFrom<IAnimalReader<Animal>>(pen); //Vi skal kunne hente ut dyr fra vår pen via den generiske interfacen IAnimalReader<T>, og behandle de som Animal
    }
}